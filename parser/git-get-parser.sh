#!/bin/bash

# Created by argbash-init v2.8.1
# ARG_OPTIONAL_SINGLE([branch],[b],[The branch you want to download. defaults to master],[master])
# ARG_OPTIONAL_BOOLEAN([zip],[z],[Download as zip])
# ARG_OPTIONAL_BOOLEAN([tar],[t],[Download as tar.gz])
# ARG_OPTIONAL_BOOLEAN([export],[x],[When used in combination with -z or -t, abides by export-ignore rules in .gitattributes. Defaults to off],[off])
# ARG_OPTIONAL_BOOLEAN([verbose],[V],[Shows verbose output])
# ARG_OPTIONAL_BOOLEAN([dry-run],[d],[Uses system tmp directory for downloads so doesnt clutter current directory. Ignored when used with -a])
# ARG_OPTIONAL_BOOLEAN([version],[v],[Displays current version])
# ARG_POSITIONAL_SINGLE([repository],[The git repository path])
# ARG_POSITIONAL_SINGLE([directory],[The local destination path for your downloaded files],[null])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die() {
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option() {
	local first_option all_short_options='bztxVdvh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_repository=
_arg_directory="null"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_branch="master"
_arg_zip="off"
_arg_tar="off"
_arg_export="off"
_arg_verbose="off"
_arg_dry_run="off"
_arg_version="off"

print_help() {

	cat <<EOF
Usage: get-get-help [--branch BRANCH] [--zip] [--tar] [--export] [--dry-run] [--verbose]... [--version] [--help] <repository> [<directory>]

Options:
  -b BRANCH, --branch BRANCH     The branch you want to download. [default: master].
  -z, --zip                      Download as zip [default: off].
  -t, --tar                      Download as tar.gz [default: off].
  -x, --export                   When used in combination with -z or -t, abides by export-ignore rules in .gitattributes. [default: off].
  -d, --dry-run                  Uses system tmp directory for downloads so doesnt clutter current directory. Ignored when used with -a [default: off].
  -V VERBOSE, --verbose VERBOSE  Set verbose output (can be specified multiple times to increase the effect) [default: 0].
  -v, --version                  Prints version.
  -h, --help                     Prints help.
EOF

}

parse_commandline() {
	_positionals_count=0
	while test $# -gt 0; do
		_key="$1"
		case "$_key" in
		-b | --branch)
			test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
			_arg_branch="$2"
			shift
			;;
		--branch=*)
			_arg_branch="${_key##--branch=}"
			;;
		-b*)
			_arg_branch="${_key##-b}"
			;;
		-z | --no-zip | --zip)
			_arg_zip="on"
			test "${1:0:5}" = "--no-" && _arg_zip="off"
			;;
		-z*)
			_arg_zip="on"
			_next="${_key##-z}"
			if test -n "$_next" -a "$_next" != "$_key"; then
				{ begins_with_short_option "$_next" && shift && set -- "-z" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
			fi
			;;
		-t | --no-tar | --tar)
			_arg_tar="on"
			test "${1:0:5}" = "--no-" && _arg_tar="off"
			;;
		-t*)
			_arg_tar="on"
			_next="${_key##-t}"
			if test -n "$_next" -a "$_next" != "$_key"; then
				{ begins_with_short_option "$_next" && shift && set -- "-t" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
			fi
			;;
		-x | --no-export | --export)
			_arg_export="on"
			test "${1:0:5}" = "--no-" && _arg_export="off"
			;;
		-x*)
			_arg_export="on"
			_next="${_key##-x}"
			if test -n "$_next" -a "$_next" != "$_key"; then
				{ begins_with_short_option "$_next" && shift && set -- "-x" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
			fi
			;;
		-V | --no-verbose | --verbose)
			_arg_verbose="on"
			test "${1:0:5}" = "--no-" && _arg_verbose="off"
			;;
		-V*)
			_arg_verbose="on"
			_next="${_key##-V}"
			if test -n "$_next" -a "$_next" != "$_key"; then
				{ begins_with_short_option "$_next" && shift && set -- "-V" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
			fi
			;;
		-d | --no-dry-run | --dry-run)
			_arg_dry_run="on"
			test "${1:0:5}" = "--no-" && _arg_dry_run="off"
			;;
		-d*)
			_arg_dry_run="on"
			_next="${_key##-d}"
			if test -n "$_next" -a "$_next" != "$_key"; then
				{ begins_with_short_option "$_next" && shift && set -- "-d" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
			fi
			;;
		-v | --no-version | --version)
			_arg_version="on"
			test "${1:0:5}" = "--no-" && _arg_version="off"
			;;
		-v*)
			_arg_version="on"
			_next="${_key##-v}"
			if test -n "$_next" -a "$_next" != "$_key"; then
				{ begins_with_short_option "$_next" && shift && set -- "-v" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
			fi
			;;
		-h | --help)
			print_help
			exit 0
			;;
		-h*)
			print_help
			exit 0
			;;
		*)
			_last_positional="$1"
			_positionals+=("$_last_positional")
			_positionals_count=$((_positionals_count + 1))
			;;
		esac
		shift
	done
}

handle_passed_args_count() {
	local _required_args_string="'repository'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 1 and 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 1 and 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}

assign_positional_args() {
	local _positional_name _shift_for=$1
	_positional_names="_arg_repository _arg_directory "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}; do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

printf 'Value of --%s: %s\n' 'branch' "$_arg_branch"
printf 'Value of --%s: %s\n' 'archive' "$_arg_archive"
printf "'%s' is %s\\n" 'export' "$_arg_export"
printf "'%s' is %s\\n" 'verbose' "$_arg_verbose"
printf "'%s' is %s\\n" 'dry-run' "$_arg_dry_run"
printf "'%s' is %s\\n" 'version' "$_arg_version"
printf "Value of '%s': %s\\n" 'repository' "$_arg_repository"
printf "Value of '%s': %s\\n" 'directory' "$_arg_directory"

# ] <-- needed because of Argbash
